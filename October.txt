10/4
File Storage

Introduction
Configuration
-The Public Disk
-The Local Driver
-Driver Prerequisites
-Caching
Obtaining Disk Instances
Retrieving Files
-Downloading Files
-File URLs
-File Metadata
Storing Files
-File Uploads
-File Visibility
Deleting Files
Directories
Custom Filesystems

Introduction
The Laravel Flysystem integration provides simple to use drivers for working with local filesystems and Amazon S3.

Configuration
The filesystem configuration file is located at config/filesystems.php.

The Public Disk
To create the symbolic link, you may use the storage:link Artisan command:
php artisan storage:link
echo asset('storage/file.txt');
'links' => [
    public_path('storage') => storage_path('app/public'),
    public_path('images') => storage_path('app/images'),
],

The Local Driver
When using the local driver, all file operations are relative to the root directory defined in your filesystems configuration file.
Storage::disk('local')->put('file.txt', 'Contents');

Permissions
The public visibility translates to 0755 for directories and 0644 for files.
'local' => [
    'driver' => 'local',
    'root' => storage_path('app'),
    'permissions' => [
        'file' => [
            'public' => 0664,
            'private' => 0600,
        ],
        'dir' => [
            'public' => 0775,
            'private' => 0700,
        ],
    ],
],

Driver Prerequisites
Composer Packages
Before using the SFTP or S3 drivers, you will need to install the appropriate package via Composer:
SFTP: league/flysystem-sftp ~1.0
Amazon S3: league/flysystem-aws-s3-v3 ~1.0
CachedAdapter: league/flysystem-cached-adapter ~1.0
S3 Driver Configuration
The S3 driver configuration information is located in your config/filesystems.php configuration file. 
FTP Driver Configuration
Laravel's Flysystem integrations works great with FTP; however, a sample configuration is not included with the framework's default filesystems.php configuration file.
SFTP Driver Configuration
Laravel's Flysystem integrations works great with SFTP; however, a sample configuration is not included with the framework's default filesystems.php configuration file.
'sftp' => [
    'driver' => 'sftp',
    'host' => 'example.com',
    'username' => 'your-username',
    'password' => 'your-password',
],

Caching
To enable caching for a given disk, you may add a cache directive to the disk's configuration options. 
's3' => [
    'driver' => 's3',
    'cache' => [
        'store' => 'memcached',
        'expire' => 600,
        'prefix' => 'cache-prefix',
    ],
],

Obtaining Disk Instances
The Storage facade may be used to interact with any of your configured disks.
use Illuminate\Support\Facades\Storage;
Storage::put('avatars/1', $fileContents);
Storage::disk('s3')->put('avatars/1', $fileContents);

Retrieving Files
The get method may be used to retrieve the contents of a file.
$contents = Storage::get('file.jpg');
$exists = Storage::disk('s3')->exists('file.jpg');
$missing = Storage::disk('s3')->missing('file.jpg');
Downloading Files
return Storage::download('file.jpg');
return Storage::download('file.jpg', $name, $headers);

File URLs
You may use the url method to get the URL for the given file. 
use Illuminate\Support\Facades\Storage;
$url = Storage::url('file.jpg');

Temporary URLs
For files stored using the s3 you may create a temporary URL to a given file using the temporaryUrl method.
$url = Storage::temporaryUrl(
    'file.jpg', now()->addMinutes(5)
);
$url = Storage::temporaryUrl(
    'file.jpg',
    now()->addMinutes(5),
    ['ResponseContentType' => 'application/octet-stream']
);
URL Host Customization
'public' => [
    'driver' => 'local',
    'root' => storage_path('app/public'),
    'url' => env('APP_URL').'/storage',
    'visibility' => 'public',
],

File Metadata
$size = Storage::size('file.jpg');
The lastModified method returns the UNIX timestamp of the last time the file was modified:
$time = Storage::lastModified('file.jpg');

Storing Files
Storage::put('file.jpg', $contents);
Storage::put('file.jpg', $resource);
Automatic Streaming
If you would like Laravel to automatically manage streaming a given file to your storage location, you may use the putFile or putFileAs method.
Storage::putFile('photos', new File('/path/to/photo'));
Storage::putFileAs('photos', new File('/path/to/photo'), 'photo.jpg');
Storage::putFile('photos', new File('/path/to/photo'), 'public');
Prepending & Appending To Files
Storage::prepend('file.log', 'Prepended Text');
Storage::append('file.log', 'Appended Text');
Copying & Moving Files
Storage::copy('old/file.jpg', 'new/file.jpg');
Storage::move('old/file.jpg', 'new/file.jpg');

File Uploads
  public function update(Request $request)
    {
        $path = $request->file('avatar')->store('avatars');

        return $path;
    }
$path = Storage::putFile('avatars', $request->file('avatar'));
$path = $request->file('avatar')->storeAs(
    'avatars', $request->user()->id
);
$path = Storage::putFileAs(
    'avatars', $request->file('avatar'), $request->user()->id
);
Specifying A Disk
$path = $request->file('avatar')->store(
    'avatars/'.$request->user()->id, 's3'
);
Other File Information
$name = $request->file('avatar')->getClientOriginalName();
$extension = $request->file('avatar')->extension();

File Visibility
use Illuminate\Support\Facades\Storage;

Storage::put('file.jpg', $contents, 'public');
If the file has already been stored, its visibility can be retrieved and set via the getVisibility and setVisibility methods:

$visibility = Storage::getVisibility('file.jpg');

Storage::setVisibility('file.jpg', 'public');
$path = $request->file('avatar')->storePublicly('avatars', 's3');

$path = $request->file('avatar')->storePubliclyAs(
    'avatars',
    $request->user()->id,
    's3'
);
Deleting Files
use Illuminate\Support\Facades\Storage;
Storage::delete('file.jpg');
Storage::delete(['file.jpg', 'file2.jpg']);
Storage::disk('s3')->delete('folder_path/file_name.jpg');

Directories
Get All Files Within A Directory
$files = Storage::files($directory);
$files = Storage::allFiles($directory);
Get All Directories Within A Directory
$directories = Storage::directories($directory);
$directories = Storage::allDirectories($directory);
Create A Directory
The makeDirectory method will create the given directory, including any needed subdirectories:
Storage::makeDirectory($directory);
Delete A Directory
Finally, the deleteDirectory method may be used to remove a directory and all of its files:

Custom Filesystems
composer require spatie/flysystem-dropbox
Next, you should create a service provider such as DropboxServiceProvider.
public function boot()
    {
        Storage::extend('dropbox', function ($app, $config) {
            $client = new DropboxClient(
                $config['authorization_token']
            );

            return new Filesystem(new DropboxAdapter($client));
        });
    }
'providers' => [
    // ...
    App\Providers\DropboxServiceProvider::class,
];
Once you have created and registered the extension's service provider, you may use the dropbox driver in your config/filesystems.php configuration file.

10/5
Helpers

Introduction
Available Methods

Introduction
Laravel includes a variety of global "helper" PHP functions. Many of these functions are used by the framework itself; however, you are free to use them in your own applications if you find them convenient.

Available Methods
-Arrays & Objects
	Arr::accessible, Arr::add, Arr::collapse, Arr::crossJoin, Arr::divide, Arr::dot, Arr::except, Arr::exists
	Arr::first, Arr::flatten, Arr::forget, Arr::get, Arr::has, Arr::hasAny, Arr::isAssoc, Arr::last
	Arr::only, Arr::pluck, Arr::prepend, Arr::pull, Arr::query, Arr::random, Arr::set, Arr::shuffle
	Arr::sort, Arr::sortRecursive, Arr::where, Arr::wrap, data_fill, data_get, data_set, head, last

-Paths
	app_path, base_path, config_path, database_path, mix, public_path, resource_path, storage_path

-Strings
	__, class_basename, e, preg_replace_array, Str::after, Str::afterLast, Str::ascii, Str::before, 
	Str::beforeLast, Str::between, Str::camel, Str::contains, Str::containsAll, Str::endsWith
	Str::finish, Str::is, Str::isAscii, Str::isUuid, Str::kebab, Str::length, Str::limit, Str::lower
	Str::orderedUuid, Str::padBoth, Str::padLeft, Str::padRight, Str::plural, Str::random, Str::replaceArray
	Str::replaceFirst, Str::replaceLast, Str::singular, Str::slug, Str::snake, Str::start, Str::startsWith
	Str::studly, Str::substr, Str::title, Str::ucfirst, Str::upper, Str::uuid, Str::words, trans, trans_choice

-Fluent Strings
	after, afterLast, append, ascii, basename, before, beforeLast, camel, contains, containsAll, dirname
	endsWith, exactly, explode, finish, is, isAscii, isEmpty, isNotEmpty, kebab, length, limit, lower
	ltrim, match, matchAll, padBoth, padLeft, padRight, plural, prepend, replace, replaceArray
	replaceFirst, replaceLast, replaceMatches, rtrim, singular, slug, snake, split, start, startsWith
	studly, substr, title, trim, ucfirst, upper, when, whenEmpty, words, URLs, action, asset, route
	secure_asset, secure_url, url

-Miscellaneous
	abort, abort_if, abort_unless, app, auth, back, bcrypt, blank, broadcast, cache, class_uses_recursive
	collect, config, cookie, csrf_field, csrf_token, dd, dispatch, dispatch_now, dump, env, event, factory
	filled, info, logger, method_field, now, old, optional, policy, redirect, report, request, rescue
	resolve, response, retry, session, tap, throw_if, throw_unless, today, trait_uses_recursive, transform
	validator, value, view, with

10/6
File Storage

Introduction
Configuration
-The Public Disk
-The Local Driver
-Driver Prerequisites
-Caching
Obtaining Disk Instances
Retrieving Files
-Downloading Files
-File URLs
-File Metadata
Storing Files
-File Uploads
-File Visibility
Deleting Files
Directories
Custom Filesystems

Introduction
Laravel provides a powerful filesystem abstraction thanks to the wonderful Flysystem PHP package by Frank de Jonge. 

Configuration
The filesystem configuration file is located at config/filesystems.php. Within this file you may configure all of your "disks".
The Public Disk
The public disk is intended for files that are going to be publicly accessible. 
php artisan storage:link
Once a file has been stored and the symbolic link has been created, you can create a URL to the files using the asset helper:
echo asset('storage/file.txt');
'links' => [
    public_path('storage') => storage_path('app/public'),
    public_path('images') => storage_path('app/images'),
],
The Local Driver
When using the local driver, all file operations are relative to the root directory defined in your filesystems configuration file. 
Storage::disk('local')->put('file.txt', 'Contents');
'local' => [
    'driver' => 'local',
    'root' => storage_path('app'),
    'permissions' => [
        'file' => [
            'public' => 0664,
            'private' => 0600,
        ],
        'dir' => [
            'public' => 0775,
            'private' => 0700,
        ],
    ],
],
Driver Prerequisites
Composer Packages
Before using the SFTP or S3 drivers, you will need to install the appropriate package via Composer:

SFTP: league/flysystem-sftp ~1.0
Amazon S3: league/flysystem-aws-s3-v3 ~1.0
CachedAdapter: league/flysystem-cached-adapter ~1.0
S3 Driver Configuration
The S3 driver configuration information is located in your config/filesystems.php configuration file.
FTP Driver Configuration
Laravel's Flysystem integrations works great with FTP; however, a sample configuration is not included with the framework's default filesystems.php configuration file.
'ftp' => [
    'driver' => 'ftp',
    'host' => 'ftp.example.com',
    'username' => 'your-username',
    'password' => 'your-password',
],
SFTP Driver Configuration
'sftp' => [
    'driver' => 'sftp',
    'host' => 'example.com',
    'username' => 'your-username',
    'password' => 'your-password',
],
Caching
To enable caching for a given disk, you may add a cache directive to the disk's configuration options.
's3' => [
    'driver' => 's3',

    // Other Disk Options...

    'cache' => [
        'store' => 'memcached',
        'expire' => 600,
        'prefix' => 'cache-prefix',
    ],
],
Obtaining Disk Instances
The Storage facade may be used to interact with any of your configured disks.
use Illuminate\Support\Facades\Storage;
Storage::put('avatars/1', $fileContents);
Storage::disk('s3')->put('avatars/1', $fileContents);
Retrieving Files
The get method may be used to retrieve the contents of a file. 
$contents = Storage::get('file.jpg');
$exists = Storage::disk('s3')->exists('file.jpg');
$missing = Storage::disk('s3')->missing('file.jpg');
Downloading Files
The download method may be used to generate a response that forces the user's browser to download the file at the given path. 
return Storage::download('file.jpg');
return Storage::download('file.jpg', $name, $headers);
File URLs
You may use the url method to get the URL for the given file. 
use Illuminate\Support\Facades\Storage;
$url = Storage::url('file.jpg');
Temporary URLs
For files stored using the s3 you may create a temporary URL to a given file using the temporaryUrl method.
$url = Storage::temporaryUrl(
    'file.jpg', now()->addMinutes(5)
);
$url = Storage::temporaryUrl(
    'file.jpg',
    now()->addMinutes(5),
    ['ResponseContentType' => 'application/octet-stream']
);
URL Host Customization
'public' => [
    'driver' => 'local',
    'root' => storage_path('app/public'),
    'url' => env('APP_URL').'/storage',
    'visibility' => 'public',
],
File Metadata
$size = Storage::size('file.jpg');
$time = Storage::lastModified('file.jpg');
Storing Files
The put method may be used to store raw file contents on a disk.
Storage::put('file.jpg', $contents);
Storage::put('file.jpg', $resource);
Automatic Streaming
Storage::putFile('photos', new File('/path/to/photo'));
Storage::putFileAs('photos', new File('/path/to/photo'), 'photo.jpg');
Storage::putFile('photos', new File('/path/to/photo'), 'public');
Prepending & Appending To Files
Storage::prepend('file.log', 'Prepended Text');
Storage::append('file.log', 'Appended Text');
Copying & Moving Files
Storage::copy('old/file.jpg', 'new/file.jpg');
Storage::move('old/file.jpg', 'new/file.jpg');
File Uploads
 public function update(Request $request)
    {
        $path = $request->file('avatar')->store('avatars');

        return $path;
    }
$path = Storage::putFile('avatars', $request->file('avatar'));
Specifying A File Name
$path = $request->file('avatar')->storeAs(
    'avatars', $request->user()->id
);
$path = Storage::putFileAs(
    'avatars', $request->file('avatar'), $request->user()->id
);
Specifying A Disk
$path = $request->file('avatar')->store(
    'avatars/'.$request->user()->id, 's3'
);
$path = $request->file('avatar')->storeAs(
    'avatars',
    $request->user()->id,
    's3'
);
Other File Information
$name = $request->file('avatar')->getClientOriginalName();
$extension = $request->file('avatar')->extension();
File Visibility
Storage::put('file.jpg', $contents, 'public');
If the file has already been stored, its visibility can be retrieved and set via the getVisibility and setVisibility methods:
$visibility = Storage::getVisibility('file.jpg');
Storage::setVisibility('file.jpg', 'public');
$path = $request->file('avatar')->storePublicly('avatars', 's3');
$path = $request->file('avatar')->storePubliclyAs(
    'avatars',
    $request->user()->id,
    's3'
);
Deleting Files
Storage::delete('file.jpg');
Storage::delete(['file.jpg', 'file2.jpg']);
Storage::disk('s3')->delete('folder_path/file_name.jpg');
Directories
Get All Files Within A Directory
The files method returns an array of all of the files in a given directory.
$files = Storage::files($directory);
$files = Storage::allFiles($directory);
$directories = Storage::directories($directory);
$directories = Storage::allDirectories($directory);
Create A Directory
Storage::makeDirectory($directory);
Delete A Directory
Storage::deleteDirectory($directory);
Custom Filesystems
composer require spatie/flysystem-dropbox
public function boot()
    {
        Storage::extend('dropbox', function ($app, $config) {
            $client = new DropboxClient(
                $config['authorization_token']
            );

            return new Filesystem(new DropboxAdapter($client));
        });
    }
'providers' => [
    App\Providers\DropboxServiceProvider::class,
];
Once you have created and registered the extension's service provider, you may use the dropbox driver in your config/filesystems.php configuration file.

10/7
HTTP Client

Introduction
Making Requests
-Request Data
-Headers
-Authentication
-Timeout
-Retries
-Error Handling
-Guzzle Options
Testing
-Faking Responses
-Inspecting Requests

Introduction
Laravel provides an expressive, minimal API around the Guzzle HTTP client, allowing you to quickly make outgoing HTTP requests to communicate with other web applications.
composer require guzzlehttp/guzzle

Making Requests
To make requests, you may use the get, post, put, patch, and delete methods. 
use Illuminate\Support\Facades\Http;
$response = Http::get('http://test.com');
$response->body() : string;
$response->json() : array|mixed;
$response->status() : int;
$response->ok() : bool;
$response->successful() : bool;
$response->failed() : bool;
$response->serverError() : bool;
$response->clientError() : bool;
$response->header($header) : string;
$response->headers() : array;
return Http::get('http://test.com/users/1')['name'];

Request Data
Of course, it is common when using POST, PUT, and PATCH to send additional data with your request. 
$response = Http::post('http://test.com/users', [
    'name' => 'Steve',
    'role' => 'Network Administrator',
]);
GET Request Query Parameters
$response = Http::get('http://test.com/users', [
    'name' => 'Taylor',
    'page' => 1,
]);
Sending Form URL Encoded Requests
$response = Http::asForm()->post('http://test.com/users', [
    'name' => 'Sara',
    'role' => 'Privacy Consultant',
]);
Sending A Raw Request Body
$response = Http::withBody(
    base64_encode($photo), 'image/jpeg'
)->post('http://test.com/photo');
Multi-Part Requests
$response = Http::attach(
    'attachment', file_get_contents('photo.jpg'), 'photo.jpg'
)->post('http://test.com/attachments');
$photo = fopen('photo.jpg', 'r');
$response = Http::attach(
    'attachment', $photo, 'photo.jpg'
)->post('http://test.com/attachments');

Headers
$response = Http::withHeaders([
    'X-First' => 'foo',
    'X-Second' => 'bar'
])->post('http://test.com/users', [
    'name' => 'Taylor',
]);
Authentication
$response = Http::withBasicAuth('taylor@laravel.com', 'secret')->post(...);
$response = Http::withDigestAuth('taylor@laravel.com', 'secret')->post(...);
Bearer Tokens
$response = Http::withToken('token')->post(...);

Timeout
The timeout method may be used to specify the maximum number of seconds to wait for a response:
$response = Http::timeout(3)->get(...);

Retries
If you would like HTTP client to automatically retry the request if a client or server error occurs, you may use the retry method. 
$response = Http::retry(3, 100)->post(...);

Error Handling
$response->successful();
$response->failed();
$response->clientError();
$response->serverError();
Throwing Exceptions
If you have a response instance and would like to throw an instance of Illuminate\Http\Client\RequestException if the response is a client or server error, you may use the throw method:
$response->throw();
return $response['user']['id'];
return Http::post(...)->throw()->json();

Guzzle Options
$response = Http::withOptions([
    'debug' => true,
])->get('http://test.com/users');

Testing
Many Laravel services provide functionality to help you easily and expressively write tests, and Laravel's HTTP wrapper is no exception. 

Faking Responses
Http::fake();
$response = Http::post(...);
Faking Specific URLs
Http::fake([
    'github.com/*' => Http::response(['foo' => 'bar'], 200, ['Headers']),
    'google.com/*' => Http::response('Hello World', 200, ['Headers']),
]);
Http::fake([
    'github.com/*' => Http::response(['foo' => 'bar'], 200, ['Headers']),
    '*' => Http::response('Hello World', 200, ['Headers']),
]);
Faking Response Sequences
Http::fake([
    'github.com/*' => Http::sequence()
                            ->push('Hello World', 200)
                            ->push(['foo' => 'bar'], 200)
                            ->pushStatus(404),
]);
Http::fake([
    'github.com/*' => Http::sequence()
                            ->push('Hello World', 200)
                            ->push(['foo' => 'bar'], 200)
                            ->whenEmpty(Http::response()),
]);
Http::fakeSequence()
        ->push('Hello World', 200)
        ->whenEmpty(Http::response());
Fake Callback
Http::fake(function ($request) {
    return Http::response('Hello World', 200);
});

Inspecting Requests
Http::fake();

Http::withHeaders([
    'X-First' => 'foo',
])->post('http://test.com/users', [
    'name' => 'Taylor',
    'role' => 'Developer',
]);

Http::assertSent(function ($request) {
    return $request->hasHeader('X-First', 'foo') &&
           $request->url() == 'http://test.com/users' &&
           $request['name'] == 'Taylor' &&
           $request['role'] == 'Developer';
});
Http::fake();

Http::post('http://test.com/users', [
    'name' => 'Taylor',
    'role' => 'Developer',
]);

Http::assertNotSent(function (Request $request) {
    return $request->url() === 'http://test.com/posts';
});
Http::fake();
Http::assertNothingSent();

Mail

Introduction
-Configuration
-Driver Prerequisites
Generating Mailables
Writing Mailables
-Configuring The Sender
-Configuring The View
-View Data
-Attachments
-Inline Attachments
-Customizing The SwiftMailer Message
Markdown Mailables
-Generating Markdown Mailables
-Writing Markdown Messages
-Customizing The Components
Sending Mail
-Queueing Mail
Rendering Mailables
-Previewing Mailables In The Browser
Localizing Mailables
Mail & Local Development
Events

10/8
Introduction
Laravel provides a clean, simple API over the popular SwiftMailer library with drivers for SMTP, Mailgun, Postmark, Amazon SES, and sendmail, allowing you to quickly get started sending mail through a local or cloud based service of your choice.

Configuration
Laravel's email services may be configured via the mail configuration file. 

Driver Prerequisites
composer require guzzlehttp/guzzle
Mailgun Driver
To use the Mailgun driver, first install Guzzle, then set the default option in your config/mail.php configuration file to mailgun. 
'mailgun' => [
    'domain' => 'your-mailgun-domain',
    'secret' => 'your-mailgun-key',
],
'mailgun' => [
    'domain' => 'your-mailgun-domain',
    'secret' => 'your-mailgun-key',
    'endpoint' => 'api.eu.mailgun.net',
],
Postmark Driver
To use the Postmark driver, install Postmark's SwiftMailer transport via Composer:
composer require wildbit/swiftmailer-postmark
'postmark' => [
    'token' => 'your-postmark-token',
],
SES Driver
"aws/aws-sdk-php": "~3.0"
'ses' => [
    'key' => 'your-ses-key',
    'secret' => 'your-ses-secret',
    'region' => 'ses-region',  // e.g. us-east-1
],
'ses' => [
    'key' => 'your-ses-key',
    'secret' => 'your-ses-secret',
    'region' => 'ses-region',  // e.g. us-east-1
    'options' => [
        'ConfigurationSetName' => 'MyConfigurationSet',
        'Tags' => [
            [
                'Name' => 'foo',
                'Value' => 'bar',
            ],
        ],
    ],
],
Generating Mailables
In Laravel, each type of email sent by your application is represented as a "mailable" class. 
php artisan make:mail OrderShipped

Writing Mailables
All of a mailable class' configuration is done in the build method. 

Configuring The Sender
Using The from Method
First, let's explore configuring the sender of the email.
public function build()
{
    return $this->from('example@example.com')
                ->view('emails.orders.shipped');
}
Using A Global from Address
'from' => ['address' => 'example@example.com', 'name' => 'App Name'],
'reply_to' => ['address' => 'example@example.com', 'name' => 'App Name'],

Configuring The View
public function build()
{
    return $this->view('emails.orders.shipped');
}
Plain Text Emails
If you would like to define a plain-text version of your email, you may use the text method.
public function build()
{
    return $this->view('emails.orders.shipped')
                ->text('emails.orders.shipped_plain');
}
View Data
Via Public Properties
Typically, you will want to pass some data to your view that you can utilize when rendering the email's HTML. 
public function __construct(Order $order)
    {
        $this->order = $order;
    }
    public function build()
    {
        return $this->view('emails.orders.shipped');
    }
<div>
    Price: {{ $order->price }}
</div>
Via The with Method:
public function build()
    {
        return $this->view('emails.orders.shipped')
                    ->with([
                        'orderName' => $this->order->name,
                        'orderPrice' => $this->order->price,
                    ]);
    }
<div>
    Price: {{ $orderPrice }}
</div>
Attachments
public function build()
{
    return $this->view('emails.orders.shipped')
                ->attach('/path/to/file');
}
public function build()
{
    return $this->view('emails.orders.shipped')
                ->attach('/path/to/file', [
                    'as' => 'name.pdf',
                    'mime' => 'application/pdf',
                ]);
}
Attaching Files from Disk
If you have stored a file on one of your filesystem disks, you may attach it to the email using the attachFromStorage method:
public function build()
{
   return $this->view('emails.orders.shipped')
               ->attachFromStorage('/path/to/file');
}
public function build()
{
   return $this->view('emails.orders.shipped')
               ->attachFromStorage('/path/to/file', 'name.pdf', [
                   'mime' => 'application/pdf'
               ]);
}
public function build()
{
   return $this->view('emails.orders.shipped')
               ->attachFromStorageDisk('s3', '/path/to/file');
}
Raw Data Attachments
The attachData method may be used to attach a raw string of bytes as an attachment.
public function build()
{
    return $this->view('emails.orders.shipped')
                ->attachData($this->pdf, 'name.pdf', [
                    'mime' => 'application/pdf',
                ]);
}

Inline Attachments
<body>
    Here is an image:

    <img src="{{ $message->embed($pathToImage) }}">
</body>
Embedding Raw Data Attachments
If you already have a raw data string you wish to embed into an email template, you may use the embedData method on the $message variable:
<body>
    Here is an image from raw data:

    <img src="{{ $message->embedData($data, $name) }}">
</body>

Customizing The SwiftMailer Message
public function build()
{
    $this->view('emails.orders.shipped');

    $this->withSwiftMessage(function ($message) {
        $message->getHeaders()
                ->addTextHeader('Custom-Header', 'HeaderValue');
    });
}

Markdown Mailables
Markdown mailable messages allow you to take advantage of the pre-built templates and components of mail notifications in your mailables.

Generating Markdown Mailables
To generate a mailable with a corresponding Markdown template, you may use the --markdown option of the make:mail Artisan command:
php artisan make:mail OrderShipped --markdown=emails.orders.shipped
public function build()
{
    return $this->from('example@example.com')
                ->markdown('emails.orders.shipped');
}

Writing Markdown Messages
@component('mail::message')
# Order Shipped
Your order has been shipped!
@component('mail::button', ['url' => $url])
View Order
@endcomponent
Thanks,<br>
{{ config('app.name') }}
@endcomponent
Button Component
@component('mail::button', ['url' => $url, 'color' => 'success'])
View Order
@endcomponent
Panel Component
@component('mail::panel')
This is the panel content.
@endcomponent
Table Component
@component('mail::table')
| Laravel       | Table         | Example  |
| ------------- |:-------------:| --------:|
| Col 2 is      | Centered      | $10      |
| Col 3 is      | Right-Aligned | $20      |
@endcomponent

Customizing The Components
php artisan vendor:publish --tag=laravel-mail

Customizing The CSS
After exporting the components, the resources/views/vendor/mail/html/themes directory will contain a default.css file.

Sending Mail
To send a message, use the to method on the Mail facade.
 public function ship(Request $request, $orderId)
    {
        $order = Order::findOrFail($orderId);

        // Ship order...

        Mail::to($request->user())->send(new OrderShipped($order));
    }
Mail::to($request->user())
    ->cc($moreUsers)
    ->bcc($evenMoreUsers)
    ->send(new OrderShipped($order));
Looping Over Recipients
foreach (['taylor@example.com', 'dries@example.com'] as $recipient) {
    Mail::to($recipient)->send(new OrderShipped($order));
}
Sending Mail Via A Specific Mailer
Mail::mailer('postmark')
        ->to($request->user())
        ->send(new OrderShipped($order));

Queueing Mail
Queueing A Mail Message
Mail::to($request->user())
    ->cc($moreUsers)
    ->bcc($evenMoreUsers)
    ->queue(new OrderShipped($order));
Delayed Message Queueing
$when = now()->addMinutes(10);
Mail::to($request->user())
    ->cc($moreUsers)
    ->bcc($evenMoreUsers)
    ->later($when, new OrderShipped($order));
Pushing To Specific Queues
$message = (new OrderShipped($order))
                ->onConnection('sqs')
                ->onQueue('emails');

Mail::to($request->user())
    ->cc($moreUsers)
    ->bcc($evenMoreUsers)
    ->queue($message);
Queueing By Default
class OrderShipped extends Mailable implements ShouldQueue
{
    //
}

Rendering Mailables
$invoice = App\Invoice::find(1);
return (new App\Mail\InvoicePaid($invoice))->render();

Previewing Mailables In The Browser
Route::get('mailable', function () {
    $invoice = App\Invoice::find(1);
    return new App\Mail\InvoicePaid($invoice);
});

Localizing Mailables
Mail::to($request->user())->locale('es')->send(
    new OrderShipped($order)
);
User Preferred Locales
public function preferredLocale()
    {
        return $this->locale;
    }
Mail::to($request->user())->send(new OrderShipped($order));

Mail & Local Development
When developing an application that sends email, you probably don't want to actually send emails to live email addresses. Laravel provides several ways to "disable" the actual sending of emails during local development.
Log Driver
Instead of sending your emails, the log mail driver will write all email messages to your log files for inspection.
Universal To
Another solution provided by Laravel is to set a universal recipient of all emails sent by the framework. 
'to' => [
    'address' => 'example@example.com',
    'name' => 'Example'
],
Mailtrap
Finally, you may use a service like Mailtrap and the smtp driver to send your email messages to a "dummy" mailbox where you may view them in a true email client.

Events
Laravel fires two events during the process of sending mail messages.
protected $listen = [
    'Illuminate\Mail\Events\MessageSending' => [
        'App\Listeners\LogSendingMessage',
    ],
    'Illuminate\Mail\Events\MessageSent' => [
        'App\Listeners\LogSentMessage',
    ],
];

10/11
Notifications

Introduction
Creating Notifications
Sending Notifications
-Using The Notifiable Trait
-Using The Notification Facade
-Specifying Delivery Channels
-Queueing Notifications
-On-Demand Notifications
Mail Notifications
-Formatting Mail Messages
-Customizing The Sender
-Customizing The Recipient
-Customizing The Subject
-Customizing The Mailer
-Customizing The Templates
-Previewing Mail Notifications
Markdown Mail Notifications
-Generating The Message
-Writing The Message
-Customizing The Components
Database Notifications
-Prerequisites
-Formatting Database Notifications
-Accessing The Notifications
-Marking Notifications As Read
Broadcast Notifications
-Prerequisites
-Formatting Broadcast Notifications
-Listening For Notifications
SMS Notifications
-Prerequisites
-Formatting SMS Notifications
-Formatting Shortcode Notifications
-Customizing The "From" Number
-Routing SMS Notifications
Slack Notifications
-Prerequisites
-Formatting Slack Notifications
-Slack Attachments
-Routing Slack Notifications
Localizing Notifications
Notification Events
Custom Channels

10/12
Package Development

Introduction
-A Note On Facades
Package Discovery
Service Providers
Resources
-Configuration
-Migrations
-Factories
-Routes
-Translations
-Views
-View Components
Commands
Public Assets
Publishing File Groups

10/13
Queues

Introduction
-Connections Vs. Queues
-Driver Notes & Prerequisites
Creating Jobs
-Generating Job Classes
-Class Structure
-Job Middleware
Dispatching Jobs
-Delayed Dispatching
-Synchronous Dispatching
-Job Chaining
-Customizing The Queue & Connection
-Specifying Max Job Attempts / Timeout Values
-Rate Limiting
-Error Handling
Queueing Closures
Running The Queue Worker
-Queue Priorities
-Queue Workers & Deployment
-Job Expirations & Timeouts
Supervisor Configuration
Dealing With Failed Jobs
-Cleaning Up After Failed Jobs
-Failed Job Events
-Retrying Failed Jobs
-Ignoring Missing Models
Job Events

10/14
Task Scheduling

Introduction
Defining Schedules
-Scheduling Artisan Commands
-Scheduling Queued Jobs
-Scheduling Shell Commands
-Schedule Frequency Options
-Timezones
-Preventing Task Overlaps
-Running Tasks On One Server
-Background Tasks
-Maintenance Mode
Task Output
Task Hooks

10/15
Task Scheduling

Introduction
Defining Schedules
-Scheduling Artisan Commands
-Scheduling Queued Jobs
-Scheduling Shell Commands
-Schedule Frequency Options
-Timezones
-Preventing Task Overlaps
-Running Tasks On One Server
-Background Tasks
-Maintenance Mode
Task Output
Task Hooks

10/18
Database: Getting Started

Introduction
Configuration
-Read & Write Connections
-Using Multiple Database Connections
-Running Raw SQL Queries
Listening For Query Events
Database Transactions

10/19
Database: Query Builder

Introduction
Retrieving Results
-Chunking Results
-Aggregates
Selects
Raw Expressions
Joins
Unions
Where Clauses
-Parameter Grouping
-Where Exists Clauses
-Subquery Where Clauses
-JSON Where Clauses
Ordering, Grouping, Limit & Offset
Conditional Clauses
Inserts
Updates
-Updating JSON Columns
-Increment & Decrement
Deletes
Pessimistic Locking
Debugging

Database: Pagination

Introduction
Basic Usage
-Paginating Query Builder Results
-Paginating Eloquent Results
-Manually Creating A Paginator
Displaying Pagination Results
-Converting Results To JSON
Customizing The Pagination View
-Using Tailwind
Paginator Instance Methods

Database: Migrations

Introduction
Generating Migrations
Migration Structure
Running Migrations
-Rolling Back Migrations
Tables
-Creating Tables
-Renaming / Dropping Tables
Columns
-Creating Columns
-Column Modifiers
-Modifying Columns
-Dropping Columns
Indexes
-Creating Indexes
-Renaming Indexes
-Dropping Indexes
-Foreign Key Constraints

Database: Seeding

Introduction
Writing Seeders
-Using Model Factories
-Calling Additional Seeders
Running Seeders

Redis

Introduction
-Configuration
-Predis
-PhpRedis
Interacting With Redis
-Pipelining Commands
Pub / Sub

Eloquent: Getting Started

Introduction
Defining Models
-Eloquent Model Conventions
-Default Attribute Values
Retrieving Models
-Collections
-Chunking Results
-Advanced Subqueries
Retrieving Single Models / Aggregates
-Retrieving Aggregates
Inserting & Updating Models
-Inserts
-Updates
-Mass Assignment
-Other Creation Methods
Deleting Models
-Soft Deleting
-Querying Soft Deleted Models
Replicating Models
Query Scopes
-Global Scopes
-Local Scopes
Comparing Models
Events
-Using Closures
-Observers
-Muting Events

10/20
Eloquent: Relationships

Introduction
Defining Relationships
-One To One
-One To Many
-One To Many (Inverse)
-Many To Many
-Defining Custom Intermediate Table Models
-Has One Through
-Has Many Through
Polymorphic Relationships
-One To One
-One To Many
-Many To Many
-Custom Polymorphic Types
Dynamic Relationships
Querying Relations
-Relationship Methods Vs. Dynamic Properties
-Querying Relationship Existence
-Querying Relationship Absence
-Querying Polymorphic Relationships
-Counting Related Models
-Counting Related Models On Polymorphic Relationships
Eager Loading
-Constraining Eager Loads
-Lazy Eager Loading
Inserting & Updating Related Models
-The save Method
-The create Method
-Belongs To Relationships
-Many To Many Relationships
Touching Parent Timestamps

10/21
Eloquent: Collections

Introduction
Available Methods
Custom Collections

Eloquent: API Resources

Introduction
Generating Resources
Concept Overview
-Resource Collections
Writing Resources
-Data Wrapping
-Pagination
-Conditional Attributes
-Conditional Relationships
-Adding Meta Data
Resource Responses

Eloquent: Serialization

Introduction
Serializing Models & Collections
-Serializing To Arrays
-Serializing To JSON
Hiding Attributes From JSON
Appending Values To JSON
Date Serialization

10/24
Testing: Getting Started

Introduction
Environment
Creating & Running Tests
-Artisan Test Runner

HTTP Tests

Introduction
-Customizing Request Headers
-Cookies
-Debugging Responses
Session / Authentication
Testing JSON APIs
Testing File Uploads
Available Assertions
-Response Assertions
-Authentication Assertions

10/25
Console Tests

Introduction
Expecting Input / Output

Laravel Dusk

Introduction
Installation
-Managing ChromeDriver Installations
-Using Other Browsers
Getting Started
-Generating Tests
-Running Tests
-Environment Handling
-Creating Browsers
-Browser Macros
-Authentication
-Database Migrations
-Cookies
-Taking A Screenshot
-Storing Console Output To Disk
-Storing Page Source To Disk
Interacting With Elements
-Dusk Selectors
-Clicking Links
-Text, Values, & Attributes
-Using Forms
-Attaching Files
-Using The Keyboard
-Using The Mouse
-JavaScript Dialogs
-Scoping Selectors
-Waiting For Elements
-Scrolling An Element Into View
-Making Vue Assertions
Available Assertions
Pages
-Generating Pages
-Configuring Pages
-Navigating To Pages
-Shorthand Selectors
-Page Methods
Components
-Generating Components
-Using Components
Continuous Integration
-CircleCI
-Codeship
-Heroku CI
-Travis CI
-GitHub Actions

